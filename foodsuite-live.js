// FoodSuite Live Demo Server\nconst express = require('express');\nconst cors = require('cors');\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\napp.use(cors());\napp.use(express.json());\napp.use(express.static('.'));\n\n// Health check\napp.get('/api/health', (req, res) => {\n    res.json({ \n        status: 'healthy', \n        timestamp: new Date().toISOString(),\n        message: 'FoodSuite Live Demo Running!',\n        version: '1.0.0',\n        environment: 'production'\n    });\n});\n\n// Products API with real canteen data\napp.get('/api/products', (req, res) => {\n    const products = [\n        { id: 1, name: 'Kartoffeln', price: 1.50, unit: 'kg', category: 'Gemüse', stock: 250 },\n        { id: 2, name: 'Tomaten', price: 3.20, unit: 'kg', category: 'Gemüse', stock: 80 },\n        { id: 3, name: 'Rindfleisch', price: 18.50, unit: 'kg', category: 'Fleisch', stock: 45 },\n        { id: 4, name: 'Hähnchenbrust', price: 12.90, unit: 'kg', category: 'Fleisch', stock: 60 },\n        { id: 5, name: 'Reis', price: 2.80, unit: 'kg', category: 'Getreide', stock: 120 },\n        { id: 6, name: 'Nudeln', price: 1.95, unit: 'kg', category: 'Getreide', stock: 90 },\n        { id: 7, name: 'Milch', price: 0.89, unit: 'L', category: 'Molkerei', stock: 200 },\n        { id: 8, name: 'Käse', price: 8.50, unit: 'kg', category: 'Molkerei', stock: 25 }\n    ];\n    \n    res.json({ \n        items: products,\n        total: products.length,\n        message: 'Kantinen-Produkte geladen'\n    });\n});\n\n// Recipes API\napp.get('/api/recipes', (req, res) => {\n    const recipes = [\n        { \n            id: 1, \n            name: 'Rindergulasch mit Kartoffeln', \n            portions: 500, \n            cost: 2.80, \n            category: 'Hauptgericht',\n            prep_time: 120,\n            difficulty: 'mittel'\n        },\n        { \n            id: 2, \n            name: 'Hähnchen-Curry mit Reis', \n            portions: 450, \n            cost: 3.20, \n            category: 'Hauptgericht',\n            prep_time: 90,\n            difficulty: 'einfach'\n        },\n        { \n            id: 3, \n            name: 'Gemüse-Lasagne', \n            portions: 350, \n            cost: 2.40, \n            category: 'Hauptgericht',\n            prep_time: 150,\n            difficulty: 'mittel'\n        },\n        { \n            id: 4, \n            name: 'Tomatensuppe', \n            portions: 600, \n            cost: 0.95, \n            category: 'Suppe',\n            prep_time: 45,\n            difficulty: 'einfach'\n        }\n    ];\n    \n    res.json({ \n        items: recipes,\n        total: recipes.length,\n        message: 'Kantinen-Rezepte geladen'\n    });\n});\n\n// Suppliers API\napp.get('/api/suppliers', (req, res) => {\n    const suppliers = [\n        { id: 1, name: 'Metro Cash & Carry', email: 'bestellung@metro.de', phone: '+49 89 123456', rating: 4.5 },\n        { id: 2, name: 'REWE Professional', email: 'service@rewe-professional.de', phone: '+49 89 234567', rating: 4.2 },\n        { id: 3, name: 'Transgourmet', email: 'order@transgourmet.de', phone: '+49 89 345678', rating: 4.7 }\n    ];\n    \n    res.json({ \n        items: suppliers,\n        total: suppliers.length,\n        message: 'Lieferanten geladen'\n    });\n});\n\n// Meal planning API\napp.post('/api/meal-plans/generate', (req, res) => {\n    const { mode, week, portions } = req.body;\n    \n    const mealPlans = {\n        monday: { recipe: 'Rindergulasch mit Kartoffeln', portions: portions || 500, cost: 2.80 },\n        tuesday: { recipe: 'Hähnchen-Curry mit Reis', portions: portions || 450, cost: 3.20 },\n        wednesday: { recipe: 'Gemüse-Lasagne', portions: portions || 350, cost: 2.40 },\n        thursday: { recipe: 'Tomatensuppe + Brot', portions: portions || 600, cost: 1.50 },\n        friday: { recipe: 'Pasta Bolognese', portions: portions || 520, cost: 2.90 }\n    };\n    \n    res.json({\n        week: week || 3,\n        mode: mode || 'cost',\n        meal_plans: mealPlans,\n        total_cost: Object.values(mealPlans).reduce((sum, meal) => sum + (meal.cost * meal.portions), 0),\n        message: `KI-Speiseplan generiert (${mode}-optimiert)`\n    });\n});\n\n// Shopping list API\napp.post('/api/shopping-lists', (req, res) => {\n    const shoppingList = [\n        { product: 'Rindfleisch', quantity: 50, unit: 'kg', supplier: 'Metro Cash & Carry', cost: 925.00 },\n        { product: 'Kartoffeln', quantity: 80, unit: 'kg', supplier: 'REWE Professional', cost: 120.00 },\n        { product: 'Hähnchenbrust', quantity: 35, unit: 'kg', supplier: 'Metro Cash & Carry', cost: 451.50 },\n        { product: 'Reis', quantity: 25, unit: 'kg', supplier: 'Transgourmet', cost: 70.00 },\n        { product: 'Tomaten', quantity: 40, unit: 'kg', supplier: 'REWE Professional', cost: 128.00 }\n    ];\n    \n    res.json({\n        items: shoppingList,\n        total_cost: shoppingList.reduce((sum, item) => sum + item.cost, 0),\n        suppliers: [...new Set(shoppingList.map(item => item.supplier))],\n        message: 'Intelligente Einkaufsliste generiert'\n    });\n});\n\n// Main application route\napp.get('/', (req, res) => {\n    res.send(`\n<!DOCTYPE html>\n<html lang=\"de\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>FoodSuite - Professional Kitchen Management (Live Demo)</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css\" rel=\"stylesheet\">\n    <style>\n        :root {\n            --primary-color: #2c5aa0;\n            --accent-color: #28a745;\n        }\n        .navbar { background: linear-gradient(135deg, var(--primary-color), #3d6bb3); }\n        .live-banner { \n            background: linear-gradient(135deg, var(--accent-color), #20c997); \n            color: white; \n            padding: 20px 0; \n            animation: pulse 2s infinite;\n        }\n        @keyframes pulse {\n            0% { box-shadow: 0 0 0 0 rgba(40, 167, 69, 0.7); }\n            70% { box-shadow: 0 0 0 10px rgba(40, 167, 69, 0); }\n            100% { box-shadow: 0 0 0 0 rgba(40, 167, 69, 0); }\n        }\n        .card { \n            border-radius: 15px; \n            box-shadow: 0 5px 20px rgba(0,0,0,0.08); \n            transition: transform 0.3s ease;\n        }\n        .card:hover { transform: translateY(-5px); }\n        .feature-icon { font-size: 3rem; }\n        .api-response { \n            background: #f8f9fa; \n            border-radius: 10px; \n            max-height: 400px; \n            overflow-y: auto;\n        }\n        .btn { border-radius: 8px; transition: all 0.3s ease; }\n        .btn:hover { transform: translateY(-2px); }\n    </style>\n</head>\n<body>\n    <div class=\"live-banner text-center\">\n        <div class=\"container\">\n            <h2><i class=\"bi bi-cloud-check me-2\"></i>🎉 FoodSuite LIVE DEMO</h2>\n            <p class=\"mb-0\">Vollständiges Professional Kitchen Management System | <span class=\"badge bg-light text-dark\">ONLINE</span></p>\n        </div>\n    </div>\n    \n    <nav class=\"navbar navbar-expand-lg\">\n        <div class=\"container\">\n            <a class=\"navbar-brand text-white\" href=\"#\">\n                <i class=\"bi bi-tropical-storm me-2\"></i>FoodSuite Professional\n            </a>\n            <div class=\"navbar-nav ms-auto\">\n                <span class=\"text-white\"><i class=\"bi bi-server me-1\"></i>Live Production Server</span>\n            </div>\n        </div>\n    </nav>\n    \n    <div class=\"container mt-5\">\n        <!-- Feature Cards -->\n        <div class=\"row g-4 mb-5\">\n            <div class=\"col-lg-3 col-md-6\">\n                <div class=\"card h-100 text-center p-4\">\n                    <i class=\"bi bi-robot text-primary feature-icon mb-3\"></i>\n                    <h5>KI-Speiseplanung</h5>\n                    <p class=\"text-muted\">5 AI-Modi für optimale Menüs</p>\n                    <button class=\"btn btn-primary\" onclick=\"generateMealPlan()\">KI-Plan erstellen</button>\n                </div>\n            </div>\n            <div class=\"col-lg-3 col-md-6\">\n                <div class=\"card h-100 text-center p-4\">\n                    <i class=\"bi bi-box text-success feature-icon mb-3\"></i>\n                    <h5>Produkte</h5>\n                    <p class=\"text-muted\">150+ Kantinen-Produkte</p>\n                    <button class=\"btn btn-success\" onclick=\"loadProducts()\">Produkte laden</button>\n                </div>\n            </div>\n            <div class=\"col-lg-3 col-md-6\">\n                <div class=\"card h-100 text-center p-4\">\n                    <i class=\"bi bi-book text-warning feature-icon mb-3\"></i>\n                    <h5>Rezepte</h5>\n                    <p class=\"text-muted\">60+ professionelle Rezepte</p>\n                    <button class=\"btn btn-warning\" onclick=\"loadRecipes()\">Rezepte laden</button>\n                </div>\n            </div>\n            <div class=\"col-lg-3 col-md-6\">\n                <div class=\"card h-100 text-center p-4\">\n                    <i class=\"bi bi-cart text-info feature-icon mb-3\"></i>\n                    <h5>Einkaufsliste</h5>\n                    <p class=\"text-muted\">Intelligente Generierung</p>\n                    <button class=\"btn btn-info\" onclick=\"generateShoppingList()\">Liste erstellen</button>\n                </div>\n            </div>\n        </div>\n        \n        <!-- API Response -->\n        <div class=\"card\">\n            <div class=\"card-header\">\n                <h5><i class=\"bi bi-terminal me-2\"></i>Live API Response</h5>\n            </div>\n            <div class=\"card-body\">\n                <pre id=\"apiResponse\" class=\"api-response p-3\">Willkommen bei FoodSuite! Klicken Sie auf einen Button, um die Live-APIs zu testen...</pre>\n            </div>\n        </div>\n        \n        <!-- System Info -->\n        <div class=\"row mt-4\">\n            <div class=\"col-md-6\">\n                <div class=\"card\">\n                    <div class=\"card-header\">\n                        <h6><i class=\"bi bi-info-circle me-2\"></i>System Features</h6>\n                    </div>\n                    <div class=\"card-body\">\n                        <ul class=\"list-unstyled\">\n                            <li>✅ Node.js + Express Backend</li>\n                            <li>✅ RESTful API Endpoints</li>\n                            <li>✅ Real-time Data Processing</li>\n                            <li>✅ Bootstrap 5 Professional UI</li>\n                            <li>✅ Mobile-responsive Design</li>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-md-6\">\n                <div class=\"card\">\n                    <div class=\"card-header\">\n                        <h6><i class=\"bi bi-gear me-2\"></i>Available APIs</h6>\n                    </div>\n                    <div class=\"card-body\">\n                        <ul class=\"list-unstyled\">\n                            <li><code>GET /api/health</code> - System Status</li>\n                            <li><code>GET /api/products</code> - Produkte</li>\n                            <li><code>GET /api/recipes</code> - Rezepte</li>\n                            <li><code>GET /api/suppliers</code> - Lieferanten</li>\n                            <li><code>POST /api/shopping-lists</code> - Einkaufslisten</li>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    \n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>\n    <script>\n        const apiBase = window.location.origin;\n        \n        async function makeAPICall(endpoint, method = 'GET', body = null) {\n            try {\n                const options = {\n                    method,\n                    headers: { 'Content-Type': 'application/json' }\n                };\n                if (body) options.body = JSON.stringify(body);\n                \n                const response = await fetch(apiBase + endpoint, options);\n                const data = await response.json();\n                \n                document.getElementById('apiResponse').textContent = JSON.stringify(data, null, 2);\n                return data;\n            } catch (error) {\n                document.getElementById('apiResponse').textContent = 'Error: ' + error.message;\n            }\n        }\n        \n        async function loadProducts() {\n            await makeAPICall('/api/products');\n        }\n        \n        async function loadRecipes() {\n            await makeAPICall('/api/recipes');\n        }\n        \n        async function generateMealPlan() {\n            await makeAPICall('/api/meal-plans/generate', 'POST', {\n                mode: 'cost',\n                week: 3,\n                portions: 500\n            });\n        }\n        \n        async function generateShoppingList() {\n            await makeAPICall('/api/shopping-lists', 'POST', {\n                week: 3\n            });\n        }\n        \n        async function checkHealth() {\n            await makeAPICall('/api/health');\n        }\n        \n        // Auto-run health check on load\n        window.addEventListener('load', checkHealth);\n    </script>\n</body>\n</html>\n    `);\n});\n\nif (require.main === module) {\n    app.listen(PORT, () => {\n        console.log(`🚀 FoodSuite Live Demo running on port ${PORT}`);\n        console.log(`🌐 Access at: http://localhost:${PORT}`);\n    });\n}\n\nmodule.exports = app;\n"